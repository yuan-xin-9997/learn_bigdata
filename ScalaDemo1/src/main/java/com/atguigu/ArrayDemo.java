package com.atguigu;

import java.util.ArrayList;

/**
 * 1、 集合与数组的相同点是什么?
 * 	都是容器,可以存储多个数据
 * 2 、集合与数组的不同点是什么?
 * 	①.数组的长度是不可变的,集合的长度是可变的
 * 	②.数组可以存基本数据类型和引用数据类型
 * 	    集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类
 */
public class ArrayDemo {
    public static void main(String[] args) {

        // 数组(array)：是一种用于存储多个相同数据类型的存储模型(可以理解为容器)
        // Java中的数组必须先初始化,然后才能使用
            //所谓初始化：就是为数组中的数组元素分配内存空间，并为每个数组元素赋值
            //注意：数组中的每一个数据，我们称之为数组中的元素
        // 一维数组声明
        //一维数组的声明方式：type var[] 或 type[] var；

        // 动态初始化：数组声明且为数组元素分配空间与赋值的操作分开进行
        int[] arr = new int[3];
        arr[0] = 3;
        arr[1] = 9;
        arr[2] = 8;
        System.out.println(arr);
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
        // arr.add(1); // 数组是定长的，不可以添加元素

        // 静态初始化：在定义数组的同时就为数组元素分配空间并赋值。
        int[] a = new int[]{ 3, 9, 8};
        System.out.println(a);

        // Java 定义集合
        ArrayList<Integer> integers = new ArrayList<>();
        integers.add(1);
        //integers.add(true);
        System.out.println(integers);

        // Collection集合的常用方法
        //     boolean add(E e)                    向集合中添加元素
        //     boolean remove(E e)              将元素从集合中删除
        //     boolean removeIf(Object o)   根据条件进行删除
        //     void clear()                              清空集合所有的元素
        //     boolean contains(E e)             判断集合中是否包含指定的元素
        //     boolean isEmpty()                   判断集合是否为空
        //     int size()                                   获取集合的长度
        System.out.println(integers.isEmpty());
        System.out.println(integers.size());


        /*
        * 数组和集合是在编程中常用的数据结构，它们都有各自的特点和用途。

首先，数组是一种固定大小的数据结构，用于存储具有相同数据类型的元素。数组的长度在创建时就确定了，无法动态调整。数组具有以下优点：
1. 快速访问：由于数组中的元素在内存中是连续存储的，因此可以通过索引快速定位和访问元素。
2. 内存效率高：数组中的元素占用的空间是连续的，不会出现额外的空间浪费。
3. 编程简单：数组提供了简单直接的方式来存储和操作数据。

然而，数组也存在一些限制和缺点：
1. 大小固定：数组的长度在创建时就确定了，无法动态增加或减少，因此需要提前知道数组的最大长度。
2. 插入和删除困难：由于数组在内存中是连续存储的，插入和删除元素会导致其他元素的位移，效率较低。
3. 不支持扩展功能：数组中的元素只包含数据本身，无法提供额外的操作方法。

相比之下，集合是一种动态大小的数据结构，可以根据需要自动扩展或缩减。集合提供了丰富的操作方法和功能，常用的集合类如List、Set、Map等，具有以下优点：
1. 动态调整：集合的大小可以根据需要动态调整，可以根据实际情况灵活地增删元素。
2. 提供更多功能：集合类提供了丰富的方法和功能，如查找、排序、过滤等，可以方便地对数据进行操作。
3. 类型安全：集合类可以指定元素的数据类型，提供类型安全的操作。

然而，使用集合也存在一些缺点：
1. 内存消耗较大：集合需要维护额外的数据结构来支持动态调整大小和提供丰富的功能，因此消耗的内存较大。
2. 访问速度相对较慢：由于集合中的元素不一定在内存中是连续存储的，访问元素时需要通过遍历或哈希等方式，速度相对较慢。

综上所述，数组和集合各有优缺点，具体使用哪种数据结构要根据实际需求和场景来决定。有时候，数组的快速访问和内存效率更重要；而有时候，集合的动态调整和丰富的功能更为实用。在实际编程中，可以根据具体需求来选择使用数组或集合。
        * */
    }
}
